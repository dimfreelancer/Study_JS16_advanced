'use strict';

/**
 * загружено на
 * https://github.com/dimfreelancer/JS_15_lesson6.git
 */

/*
Урок №6
УСЛОЖНЕННОЕ ЗАДАНИЕ:
Дописать функционал игрового бота.
Кол-во попыток пользователя должно быть ограничено: 10
— если пользовательское число больше, то бот выводит "Загаданное число меньше, осталось попыток ..." и предлагает ввести новый вариант;
— если пользовательское число меньше, то бот выводит "Загаданное число больше, осталось попыток ..." и предлагает ввести новый вариант;
— если пользователь вводит правильное число, то бот выводит "Поздравляю, Вы угадали!!! Хотели бы сыграть еще?", при нажатии ОК игра перезапускается (снова 10 попыток и новое загаданное число)
— если пользователь ввел не число, то выводит сообщение "Введи число!" и предлагает ввести новый вариант;
— если пользователь нажимает "Отмена", то игра выводит прощальное сообщение и завершается.
— если закончились попытки то программа сообщает: "Попытки закончились, хотите сыграть еще?"

Программа должны быть выполнена с помощью рекурсии, без единого цикла.
Загаданное число и оставшиеся кол-во попыток должно храниться «в замыкании»
*/

const consoleAlert = (str) => {
    console.log(str);
    alert(str);
}

const consolePrompt = (str) => {
    console.log(str);
    return prompt(str);
}

//варианты функции
var isNumber = function isNumber(value) {
    return typeof value === 'number' && isFinite(value);
}
// let isNumber = (n) => !isNaN(parseFloat(n)) && isFinite(n);

const randomInteger = () => {
    const MIN = 1;
    const MAX = 100;
    let result = Math.floor((MAX * Math.random()) + MIN);
    return result;
};


///////////////////////////////////////////////////////////////////////////

const main = () => {

    // let recurseCount = 0;
    const seed = randomInteger(); //генерим загаданое число сохранится в замыкании функции
    const N = 10;
    let tries = N; //количество попыток храним в замыкании

    const next = () => {
        // console.log('recurse next', recurseCount++);
        // console.log('seed', seed);

        let userAnswer; // сюда сохраним ответ пользователя

        // функция обработки цифровой семантики слова попытка
        let getTry = (count) => { 
            if (count == 0) { return 'Ни одной попытки'; }
            if (count == 1) { return '1 попытка'; } // 1 попытка
            if (count == 2 || count == 3 || count == 4) { return count + ' попытки'; }  // 2, 3, 4 попытки
            if (count >= 5 && count <= 10) { return count + ' попыток'; }   // 5, 6, 7, 8, 9, 10, 0 попыток
        };
        
        if (tries <= 0) {
            consoleAlert('У тебя не осталось попыток\n' + 
                            'Игра окончена!');
            return; //выход из функции по истечению колличества попыток
        } else { // tries > 0
            userAnswer = consolePrompt('Угадай число от 1 до 100\n' + 
                                    'У тебя ' + getTry(tries));
        }

        console.log('Попытка: ' + tries + '\nОтвет пользователя: ', userAnswer);

        if (userAnswer === null) {
            consoleAlert('Вы нажали отмена\nКонец игры');
            return; //выход из функции по Escape
        }

        userAnswer = parseInt(userAnswer);
        // console.log('ans: ', ans, 'typeof ans', typeof ans);
        //проверка на корректость ввода данных отсекаем начисловые значения
        if ( !isNumber(userAnswer) ) {
            consoleAlert('Ошибка! Вы ввели строку!!!\nВведите целое число от 1 до 100');
            tries++;//в этом случае количество попыток не должно уменьшаться, а пользователь вводит число повторно

        } else if (seed < userAnswer) { //пользователь ввел число больше загаданого

            if ( Math.abs(userAnswer - seed) > 20 ) {
                consoleAlert('Загаданное число ЗНАЧИТЕЛЬНО меньше << ' + userAnswer + '\nУ тебя осталось еще ' + getTry(tries-1) + ' чтобы угадать');
            } else {
                consoleAlert('Почти угадал!\nНо все же загаданное число немного меньше < ' + userAnswer + '\nУ тебя осталось еще ' + getTry(tries-1) + ' чтобы угадать');
            }

        } else if (seed > userAnswer) { //пользователь ввел число меньше загаданого

            if ( Math.abs(seed - userAnswer) > 20 ) {
                consoleAlert('Загаданное число ЗНАЧИТЕЛЬНО БОЛЬШЕ >> ' + userAnswer + '\nУ тебя осталось еще ' + getTry(tries-1) + ' чтобы угадать');
            } else {
                consoleAlert('Почти угадал!\nНо все же загаданное число немного БОЛЬШЕ > ' + userAnswer + '\nУ тебя осталось еще ' + getTry(tries-1) + ' чтобы угадать');
            }

        } else if (seed === userAnswer ) {
            consoleAlert('Поздравляю, Вы угадали!\n' +
                        'Загаданное число ' + userAnswer + ' за ' + getTry(N - tries));
            return; //выход из функции
            //Пользователь выиграл!!!!
        }

        --tries; //дикримент колличества попыток
        next(); //следующий запуск итеррации рекурсии
    };

    return next; //возвращаем ссылку на функцию в замыкании
};



///////////////////////////////////////////////////////////////////

//Переделываем цикл на рекурсию
const gamePlay = () => {

    let nextPlay = main();
    nextPlay(); //по сути наша функция next() следующую итеррацию рекурсии

    console.log("спрашиваем пользователя поиграть за ново еще раз");

    if ( confirm('Поиграем еще?\nДа / Нет') ) {
        // console.log('lets play onemore time');
        gamePlay();
    } else {
        return; //выход из игры
    }
};
gamePlay();


// //Оформление в виде игрового цикла
// do {
//     let play = main(); //генерация замыкания в функции
//     play(); //по сути наша функция next()

// } while ( confirm('Поиграем еще?\nДа / Нет') );

